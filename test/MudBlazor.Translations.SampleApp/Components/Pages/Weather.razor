@page "/weather"


<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Typo="Typo.body1" Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudDataGrid T="WeatherForecast" Items="@forecasts" Hover="true" Elevation="0" RowsPerPage="10" Height="600px"
                 Filterable="true" SortMode="SortMode.Multiple" EditMode="DataGridEditMode.Form">
        <Columns>
            <PropertyColumn Property="x => x.Date" Title="Date"/>
            <PropertyColumn Property="x => x.TemperatureC" Title="Temp. (C)"/>
            <PropertyColumn Property="x => x.TemperatureF" Title="Temp. (F)"/>
            <PropertyColumn Property="x => x.Summary" Title="Summary"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="WeatherForecast" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 100).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}
